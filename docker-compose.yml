version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: estimation_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-estimation_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_DB: ${DB_NAME:-estimation_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-estimation_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - estimation_network

  # Redis for Caching and Celery
  redis:
    image: redis:7-alpine
    container_name: estimation_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - estimation_network

  # Flask Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: estimation_backend
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${DB_USER:-estimation_user}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-estimation_db}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - estimation_network
    command: gunicorn -w 4 -b 0.0.0.0:5000 --worker-class gevent --timeout 120 --log-level info src.app:create_app()

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: estimation_celery_worker
    environment:
      DATABASE_URL: postgresql://${DB_USER:-estimation_user}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-estimation_db}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    volumes:
      - ./backend:/app
      - uploads:/app/uploads
    depends_on:
      - redis
      - postgres
    networks:
      - estimation_network
    command: celery -A src.performance_optimization:AsyncProcessor.celery worker --loglevel=info --concurrency=4

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: estimation_celery_beat
    environment:
      DATABASE_URL: postgresql://${DB_USER:-estimation_user}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-estimation_db}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgres
    networks:
      - estimation_network
    command: celery -A src.performance_optimization:AsyncProcessor.celery beat --loglevel=info

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    container_name: estimation_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - estimation_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: estimation_nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - estimation_network
    profiles:
      - production

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: estimation_prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - estimation_network
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: estimation_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - estimation_network
    profiles:
      - monitoring

networks:
  estimation_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  uploads:
  prometheus_data:
  grafana_data: